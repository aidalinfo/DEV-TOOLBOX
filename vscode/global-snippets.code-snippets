{

	"template component formLayout": {
		"scope": "vue",
		"prefix": "formulaire",
		"body": [ 
		"<template>", //mettre le nom de
		"\t<FormLayout icon='${0:icon}' @ajouter='ajouter' @modifier='modifier' @reinitialiser='init' :disposition='disposition' :hasResetButton='hasResetButton' typeItem='un/une $1' :item='input' :disabled='input.${3:nom du/des champ(s) à remplir obligatoirement} ? false : true'>",
	 		"\t\t<v-row>",

			"\t\t</v-row>",
		"\t</FormLayout>",
		"</template>",
		"<script>",
			"import { mapState } from 'vuex';",
			"import { QUERY_$1, QUERY_$1s } from './graphql/queries';",
			"import FormLayout from '@/components/COMPONENTS-skeleton/Layouts/FormLayout.vue';",
			"import {",
				"\tMUTATION_$1Create,",
				"\tMUTATION_$1Update,",
			"} from './graphql/mutations';",
		
		"export default {",
		"name: '$TM_FILENAME_BASE',",
		"components: {",
		"\tFormLayout,",
		"},",
		"data: function () {",
		"\treturn {",	
		"\t\tinput: {},",
		"\t};",
		"},",
		"props: {",
		"\t $1: {",
		"\t\ttype: Object,",
		"\t\tdefault() {",
		"\t\t\treturn {",
		"\t\t\t\tid: undefined,",
		"\t\t\t};",
		"\t\t},",
		"\t},",
			"hasResetButton: { type: Boolean, default: true },",
    	"disposition: { type: String, default: 'default'},",
		"},",
		"computed: {",
		"\t...mapState(['formsErrors']),",
		"},",
		"mounted: function () {",
		"\tthis.init();",
		"},",
		"methods: {",
		"\tinit() {",
		"\t if (this.$$route.params.id)  {",
		"\t\t let id = this.$$route.params.id;",
		"\t\t this.$$apollo",
		"\t\t\t.query({",
		"\t\t\t\tquery: QUERY_$1,",
		"\t\t\t\tvariables: {",
		"\t\t\t\t\t\tid: id,",
		"\t\t\t\t},",
		"\t\t\t})",
		"\t\t\t.then((data) => {",
		"\t\t\t\tlet $1 = data.data.$1;",
		"\t\t\t\tthis.input = JSON.parse(JSON.stringify($1));",
		"\t\t\t});",
		"\t} else {",
		"\t\tthis.input = JSON.parse(JSON.stringify(this.$1));",
		"\t}",
		"\t},",
		"",
		"\tajouter() {",
		"\t\tlet toSend = this.inputConverter(this.input);",
		"\t\tthis.$$apollo",
		"\t\t\t.mutate({",
		"\t\t\t\tmutation: MUTATION_$1Create,",
		"\t\t\t\tvariables: {",
		"\t\t\t\t\tinput: toSend,",
		"\t\t\t\t},",
		"\t\t\t})",
		"\t\t\t.then((__) => {",
		"\t\t\t\tthis.init();",
		"\t\t\t\tthis.$store.commit('addAlert', {",
		"\t\t\t\t\ttype: 'info',",
		"\t\t\t\t\ttext: 'Votre $1 a été ajouté',",
		"\t\t\t\t});",
		"\t\t\t\tthis.$root.$emit('skeleton--close-dialog');",
		"\t\t\t\tthis.$root.$emit('${2:nom du components}--$1-create', __.data.$1Create);",
		"\t\t\t\tthis.$root.$emit('skeleton--close-popup');",
		"\t\t\t\t});",
		"\t},",
    "",	
		"\tinputConverter(arg) {",
		"\t\tconst obj = JSON.parse(JSON.stringify(arg));",
	  "",
		"\t\tlet input = {",
		"\t\t\t",/* ajouter les autres champs*/
		"\t\t\t",
		"\t\t};",
	  "",
		"\t\tobj.id != undefined ? (input.id = obj.id) : null;",
	  "",
		"\t\treturn input;",
		"\t},",
	  "",
		"\tmodifier() {",
    "\t\tlet toSend = this.inputConverter(this.input);",
    "\t\tthis.$$apollo.mutate({",
		"\t\t\tmutation: MUTATION_$1Update,",
		"\t\t\tvariables: {",
		"\t\t\t\tinput: toSend,",
		"\t\t\t},",
		"\t\t\trefetchQueries: [",
		"\t\t\t\t{",
		"\t\t\t\t\tquery: QUERY_$1s,",
		"\t\t\t\t},",
		"\t\t\t],",
		"\t\t\tupdate: (store, { data: { $1Update } }) => {",
		"\t\t\t\tthis.$emit('$1Return', $1Update);",
		"\t\t\t\tthis.$store.commit('addAlert', {",
		"\t\t\t\t\ttype: 'info',",
		"\t\t\t\t\ttext: 'Votre $1 a été modifié',",
		"\t\t\t\t});",
		"\t\t\t\tthis.$root.$emit('${2:nom du components}--update-$1s');",
		"\t\t\t\tthis.$root.$emit('skeleton--close-dialog');",
		"\t\t\t},",
    "\t\t});",
		"\t},",
	
		
		"},",
		"};",
		"</script>"
		],
		"description": "Template de composant FormLayout"
	},

	"Template composent View ":{
		"scope": "vue",
		"prefix": "view",
		"body":[
		"<template>", //mettre le nom de
		"\t<ViewLayout :tabs='tabs' :item='$1'>",
	 	"\t\t<template v-slot:$1>",
		"\t\t\t<${1/(.*)/${1:/capitalize}/}Actions :object='$1' :withView='false' size='xl' />",
		"\t\t\t<v-row class='align-center mx-auto'>",
    "\t\t\t\t<v-col cols='12'>",
    "\t\t\t\t\t<${1/(.*)/${1:/capitalize}/}Object size='xl' :assetProp='$1' />",
    "\t\t\t\t</v-col>",  
    "\t\t\t</v-row>",
		"\t\t</template>",
		"\t</ViewLayout>",
		"</template>",
		"<script>",
			"import { QUERY_$1 } from './graphql/queries';",
			"import { ${1/(.*)/${1:/capitalize}/}Object } from './${1/(.*)/${1:/capitalize}/}Object.vue';",
			"import { ${1/(.*)/${1:/capitalize}/}Actions } from './${1/(.*)/${1:/capitalize}/}Actions.vue';",
			"import ViewLayout from '@/components/COMPONENTS-skeleton/Layouts/ViewLayout.vue';",
		"",
		"",
		"export default {",
		"name: '$TM_FILENAME_BASE',",
		"components: {",
		"\t${1/(.*)/${1:/capitalize}Object,",
		"\t${1/(.*)/${1:/capitalize}Actions,",
		"\tViewLayout,",
		"},",
		"",
		"data: function () {",
		"\treturn {",	
		"\t\t$1: {},",
		"\t\ttabs: [,",
		"\t\t\t{ icon: 'mdi-package-variant-closed', displayName: '${1/(.*)/${1:/capitalize}/}', name: '$1'},",
		"\t\t\t{ name: 'commentaires'},",
		"\t\t\t{ name: 'fichiers'},",
		"\t\t],",
		"\t};",
		"},",
		"",
		"apollo: {",
		"\t$1: {",
		"\t\tquery: QUERY_$1,",
		"\t\t\tvariables() {",
		"\t\t\t\tlet idQuery = this.showPopup ?",
		"\t\t\t\t\tthis.id :",
		"\t\t\t\t\tthis.$$route.params.id ?",
		"\t\t\t\t\tthis.$$route.params.id :",
		"\t\t\t\t\tthis.id;",
		"\t\t\t\treturn {",
		"\t\t\t\t\tid: idQuery,",
		"\t\t\t\t};",
		"\t\t\t},",
		"\t\t},",
		"\t},",
	"}",

		],
		"description": "Template de composant View"
	},
	"template composant listLayout": {
		"scope":"vue",
		"prefix": "list",
		"body": [
			"<template>",
			"\t <ListLayout",
			"\t\tref=\"list\"",
			"\t\t:headers=\"headers\"",
			"\t\t@fetch=\"init\"",
			"\t\t@showMultipleActions=\"showMultipleActions = $event\"",
			"\t\ttitle=\"Liste des $1s\"",
			"\t>",
			"\t\t<template v-slot:multipleActions>",
			"\t\t\t<${1/(.*)/${1:/capitalize}/}Actions",
			"\t\t\t\t:multiple=\"true\"",
			"\t\t\t\t:object=\"$refs.list ? $refs.list.itemsSelected : []\"",
			"\t\t\t\tsize=\"xl\"",
			"\t\t\t\tv-show=\"showMultipleActions\"",
			"\t\t\t\t@fetch=\"init\"",
			"\t\t\t\t@loading=\"$refs.list.loading = true\"",
			"\t\t\t/>",
			"\t\t</template>",
			"\t\t<template v-slot:[`item.object`]=\"{ item }\">",
			"\t\t\t<${1/(.*)/${1:/capitalize}/}Object :$1Prop=\"item\" size=\"xs\" />",
			"\t\t</template>",
			"\t\t<template v-slot:[`item.$1Counter`]=\"{ item }\">",
			"\t\t\t<${1/(.*)/${1:/capitalize}/}Counter :customSearch=\"[{ $1: item.id }]\" />",
			"\t\t</template>",
			"\t\t<template v-slot:[`item.actions`]=\"{ item }\">",
			"\t\t\t<${1/(.*)/${1:/capitalize}/}Actions",
			"\t\t\t\t:object=\"item\"",
			"\t\t\t\tsize=\"xs\"",
			"\t\t\t\t@fetch=\"init\"",
			"\t\t\t\t@loading=\"$refs.list.loading = true\"",
			"\t\t\t/>",
			"\t\t</template>",
			"\t</ListLayout>",
			"</template>",
			"",
			"<script>",
			"import ${1/(.*)/${1:/capitalize}/}Actions from \"./${1/(.*)/${1:/capitalize}/}Actions.vue\";",
			"import ${1/(.*)/${1:/capitalize}/}Object from \"./${1/(.*)/${1:/capitalize}/}Object.vue\";",
			"import ListLayout from \"@/components/COMPONENTS-skeleton/Layouts/ListLayout.vue\";",
			"",
			"import { QUERY_$1s } from \"./graphql/queries\";",
			"",
			"export default {",
			"\tname: '$TM_FILENAME_BASE',",
			"",
			"\tcomponents: {",
			"\t\t${1/(.*)/${1:/capitalize}/}Actions,",
			"\t\t${1/(.*)/${1:/capitalize}/}Object,",
			"\t\tListLayout,",
			"\t},",
			"",
			"\tdata: () => ({",
			"",
			"\t\tsearch: null,",
			"\t\tshowMultipleActions: false,",
			"\t\theaders: [",
			"\t\t\t{ text: \"\", value: \"object\", sortable: false },",
			"\t\t\t{ text: \"Fichiers\", value: \"fichiers\" },",
			"\t\t\t{ text: \"Commentaires\", value: \"commentaires\" },",
			"\t\t\t{ text: \"Actions\", value: \"actions\", sortable: false },",
			"\t\t],",
			"  }),",
			"",
			"\tmethods: {",
			"\t\tfetch${1/(.*)/${1:/capitalize}/}s() {",
			"\t\t\tthis.$refs.list.loading = true;",
			"\t\t\tthis.$$apollo",
			"\t\t\t\t.query({",
			"\t\t\t\t\tquery: QUERY_$1s,",
			"\t\t\t\t\tvariables: {",
			"\t\t\t\t\t\tpagination: this.$refs.list.pagination,",
			"\t\t\t\t\t},",
			"\t\t\t\t\tfetchPolicy: \"no-cache\",",
			"\t\t\t\t})",
			"\t\t\t\t.then((__) => {",
			"\t\t\t\t\tconst data = __.data;",
			"\t\t\t\t\tthis.$refs.list.items = data.$1s;",
			"\t\t\t\t\tthis.$refs.list.itemsCount = data.$1sCount;",
			"\t\t\t\t\tthis.$refs.list.loading = false;",
			"\t\t\t\t});",
			"\t\t},",
			"\t\tinit() {",
			"\t\t\tthis.fetch${1/(.*)/${1:/capitalize}/}s();",
			"\t\t},",
			"\t},",
			"};",
			"</script>",
			
		],
		"description": "Pour passer d'un champ à un autre n'oubliez pas de tabuler pour passer au champ suivant"
	},
	"template composant ActionLayout": {
		"scope": "vue",
		"prefix": "action",
		"body": [
			"<template>",
			"  <div>",
			"    <ActionLayout",
			"      :actions=\"actions\"",
			"      :size=\"size\"",
			"      :action=\"action\"",
			"      :mainIcon=\"mainIcon\"",
			"    />",
			"  </div>",
			"</template>",
			"",
			"<script>",
			"import ActionLayout from \"@/components/COMPONENTS-skeleton/Layouts/ActionLayout.vue\";",
			"",
			"import {",
			"  MUTATION_$1Delete,",
			"  MUTATION_$1Update,",
			"} from \"./graphql/mutations.js\";",
			"",
			"export default {",
			"  name: \"EntrepriseActions\",",
			"  components: {",
			"    ActionLayout,",
			"  },",
			"",
			"  props: {",
			"    withView: { type: Boolean, default: true },",
			"    mainIcon: { type: String, default: \"${3:icon du components}\" },",
			"    object: { type: [Array, Object] },",
			"    size: { type: String, default: \"md\" },",
			"    action: { type: String, default: \"router\" },",
			"    multiple: { type: Boolean, default: false },",
			"  },",
			"",
			"  computed: {",
			"    actions() {",
			"      return [",
			"        {",
			"          text: \"Editer\",",
			"          icon: \"mdi-pencil\",",
			"          path: \"/${2:nom du components}/$1s/edit/\" + this.object.id,",
			"          acl: \"/${2:nom du components}/$1s/edit\",",
			"          color: \"\",",
			"          conditions: { multiple: false, isActif: true },",
			"        },",
			"        {",
			"          text: \"Supprimer\",",
			"          icon: \"mdi-delete\",",
			"          method: \"editIsActif\",",
			"          acl: \"/${2:nom du components}/$1s/deleted\",",
			"          color: \"error\",",
			"          conditions: { multiple: true, isActif: true },",
			"        },",
			"        {",
			"          text: \"Restauration\",",
			"          icon: \"mdi-restore\",",
			"          method: \"editIsActif\",",
			"          acl: \"/${2:nom du components}/$1s/edit\",",
			"          color: \"\",",
			"          conditions: { multiple: true, isActif: false },",
			"        },",
			"        {",
			"          text: \"Supprimer définitivement\",",
			"          icon: \"mdi-delete\",",
			"          method: \"delete\",",
			"          acl: \"/${2:nom du components}/$1s/deleted\",",
			"          color: \"\",",
			"          conditions: { multiple: true, isActif: false },",
			"        },",
			"        {",
			"          text: \"Visualiser\",",
			"          icon: \"mdi-eye\",",
			"          path: \"/${2:nom du components}/$1s/view/\" + this.object.id,",
			"          acl: \"/${2:nom du components}/$1s/view\",",
			"          color: \"\",",
			"          conditions: { size: \"md xs\" },",
			"        },",
			"      ];",
			"    },",
			"  },",
			"",
			"  /**",
			"   * Permet d'utiliser la popup de validation",
			"   */",
			"  created() {",
			"    this.$root.$on(\"delete${1/(.*)/${1:/capitalize}/}\", this.delete${1/(.*)/${1:/capitalize}/});",
			"    this.$root.$on(\"edit${1/(.*)/${1:/capitalize}/}\", this.edit${1/(.*)/${1:/capitalize}/});",
			"  },",
			"",
			"  methods: {",
			"    /**",
			"     * Supprimer une $1 grâce à son id",
			"     */",
			"    delete${1/(.*)/${1:/capitalize}/}(id) {",
			"      this.$$apollo",
			"        .mutate({",
			"          mutation: MUTATION_$1Delete,",
			"          variables: { id: id },",
			"        })",
			"        .then(() => {",
			"          this.$emit(\"fetch\");",
			"        });",
			"    },",
			"",
			"    delete(obj) {",
			"      // infos qui s'afficheront dans le popup",
			"      let toValid = {",
			"        titre: \"Suppression définitive d'une $1\",",
			"        texte: `Êtes-vous sûr de vouloir supprimer définitivement l'$1 ${obj.raisonSociale} ?`,",
			"        type: \"warning\",",
			"        toReturn: {",
			"          function: \"delete${1/(.*)/${1:/capitalize}/}\", // cette fonction change en fonction du composant (ex: PersonneActions.vue ça serait deletePersonne,",
			"          //qu'il faut créer à la place de delete${1/(.*)/${1:/capitalize}/})",
			"          arg: obj.id,",
			"        },",
			"      };",
			"",
			"      // Envoi l'info pour ouvrir la popup",
			"      this.$root.$emit(\"popupValidation\", toValid);",
			"    },",
			"",
			"    async edit${1/(.*)/${1:/capitalize}/}(obj) {",
			"      if (!Array.isArray(obj)) {",
			"        obj = [obj];",
			"      }",
			"      this.$emit(\"loading\");",
			"      for (let item of obj) {",
			"        let $1 = {",
			"          id: item.id,",
			"       //Ajouter les champs nécessaires",
			"        };",
			"        await this.$$apollo.mutate({",
			"          mutation: MUTATION_$1Update,",
			"          variables: {",
			"            input: $1,",
			"          },",
			"        });",
			"      }",
			"      this.$emit(\"fetch\");",
			"    },",
			"",
			"    editIsActif(obj) {",
			"      // Si obj n'est pas un tableau alors on le transforme en tableau",
			"      if (!Array.isArray(obj)) {",
			"        obj = [obj];",
			"      }",
			"      let toValid = {",
			"        titre: obj[0].isActif",
			"          ? \"Suppression d'une $1\"",
			"          : \"Restauration d'une $1\",",
			"        texte: obj[0].isActif",
			"          ? `Êtes-vous sûr de vouloir supprimer ${obj.length} $1(s) ? ` +",
			"            'Elle seront toujours présentes dans l\\'onglet \"Corbeille\"'",
			"          : `Êtes-vous sûr de vouloir restaurer ${obj.length} $1(s) ?`,",
			"        type: \"warning\",",
			"        toReturn: {",
			"          function: \"edit${1/(.*)/${1:/capitalize}/}\", // à changer selon le composant, comme delete${1/(.*)/${1:/capitalize}/}",
			"          arg: obj,",
			"        },",
			"      };",
			"",
			"      this.$root.$emit(\"popupValidation\", toValid);",
			"    },",
			"  },",
			"};",
			"</script>"
		],
		"description":"$2 = nom du COMPONENTS au pluriel , $3 = icon mdi. Pour passer d'un champ à un autre n'oubliez pas de tabuler"
	},
	"Template composant Counter": {
		"scope": "vue",
		"prefix": "counter",
		"body": [
			"<template>",
			"<div>",
			"  <CounterLayout :compteur=\"$1sCount\">",
			"    <template v-slot:icon>${0:exemple: mdi-material-design}</template>",
			"  </CounterLayout>",
			"</div>",
			"</template>",
			"",
			"<script>",
			"import CounterLayout from \"@/components/COMPONENTS-skeleton/Layouts/CounterLayout.vue\";",
			"import {",
			"  QUERY_$1sCount",
			"} from \"./graphql/queries\";",
			"export default {",
			"  name: \"${1/(.*)/${1:/capitalize}/}sCounter\",",
			"  components: {",
			"    CounterLayout,",
			"  },",
			"  props: {",
			"    customSearch: {",
			"      type: Array,",
			"      default () {",
			"        return [];",
			"      },",
			"    },",
			"  },",
			"  data: () => ({}),",
			"  apollo: {",
			"    $1sCount: {",
			"      query: QUERY_$1sCount,",
			"      variables() {",
			"        return {",
			"          pagination: {",
			"            filter: {",
			"              customSearch: this.customSearch,",
			"            },",
			"          },",
			"        };",
			"      },",
			"      fetchPolicy: \"no-cache\",",
			"    },",
			"  },",
			"  created() {",
			"    if (!this.$root._events.${2:COMPONENTS}Update${1/(.*)/${1:/capitalize}/}s) {",
			"      this.$root.$on(\"${2:COMPONENTS}Update${1/(.*)/${1:/capitalize}/}s\", this.updateQuery);",
			"    }",
			"      ",
			"    ",
			"  },",
			"  mounted: function () {},",
			"  watch: {},",
			"  methods: {",
			"    updateQuery: function () {",
			"      this.$$apollo.queries.$1sCount.refetch();",
			"    },",
			"  },",
			"};",
			"</script>"
		],
		"description": "$2 = nom du COMPONENTS au pluriel. Pour passer d'un champ à un autre n'oubliez pas de tabuler"
	},
	"Template composant Object": {
		"scope": "vue",
		"prefix": "object",
		"body": [
			"<template>",
			"  <div>",
			"    <template v-if=\"$1\">",
			"      <template v-if=\"size == 'xl'\">",
			"        <ObjectLayout :action=\"action\" size=\"xl\" :item=\"$1\">",
			"          <template v-slot:icon>'${4:exemple: mdi-material-design}'</template>",
			"          <template v-slot:titre> {{ $1.${2: remplir un champ } }}</template>",
			"          <template v-slot:body>",
			"            <ObjectLayout v-if=\"$1.${2: remplir un champ }\" class=\"py-2\">",
			"              <template v-slot:icon>mdi-tag-text</template>",
			"              <template v-slot:titre>Dénomination de l'$1</template>",
			"              <template v-slot:content>{{ $1.${2: remplir un champ } }}</template>",
			"            </ObjectLayout>",
			"          </template>",
			"        </ObjectLayout>",
			"      </template>",
			"      <template v-if=\"size == 'md'\">",
			"        <ObjectLayout size=\"md\">",
			"          <template v-slot:icon>'${4:exemple: mdi-material-design}'</template>",
			"          <template v-slot:content>{{ $1.${2: remplir un champ } }}</template>",
			"          <template v-slot:extracontent>",
			"            <v-icon small class=\"mr-2\">mdi-material-design</v-icon>",
			"            {{ $1.${5: remplir extracontent } }}",
			"          </template>",
			"        </ObjectLayout>",
			"      </template>",
			"      <template v-if=\"size == 'xs'\">",
			"        <ObjectLayout",
			"          size=\"xs\"",
			"          :action=\"action\"",
			"          :onClickPush=\"`/${3:COMPONENTS}/$1s/view/${$1.id}`\"",
			"        >",
			"          <template v-slot:icon>'${4:exemple: mdi-material-design}'</template>",
			"          <template v-slot:content",
			"            >{{ $1.numeroInventaire }} - {{ $1.${2: remplir un champ } }}</template",
			"          >",
			"        </ObjectLayout>",
			"      </template>",
			"    </template>",
			"  </div>",
			"</template>",
			"",
			"<script>",
			"import { QUERY_$1 } from \"./graphql/queries\";",
			"import ObjectLayout from \"@/components/COMPONENTS-skeleton/Layouts/ObjectLayout.vue\";",
			"export default {",
			" name: '$TM_FILENAME_BASE',",
			"",
			"  components: {",
			"    ObjectLayout,",
			"  },",
			"",
			"  props: {",
			"    size: { type: String, default: \"md\" },",
			"    $1Prop: {",
			"      type: Object,",
			"      default() {",
			"        return {};",
			"      },",
			"    },",
			"    $1ID: {",
			"      type: String,",
			"    },",
			"    action: {",
			"      type: String,",
			"      default: \"router\",",
			"    },",
			"  },",
			"",
			"  watch: {",
			"    $1Prop: function () {",
			"      this.init();",
			"    },",
			"    $1ID: function () {",
			"      this.init();",
			"    },",
			"  },",
			"",
			"  data: () => ({",
			"    $1: undefined,",
			"  }),",
			"",
			"  mounted: function () {",
			"    this.init();",
			"  },",
			"",
			"  methods: {",
			"    init() {",
			"      if (this.$1ID) {",
			"        let id = this.$1ID;",
			"        this.$$apollo",
			"          .query({",
			"            query: QUERY_$1,",
			"            variables: { id: id },",
			"            fetchPolicy: \"no-cache\",",
			"          })",
			"          .then((data) => {",
			"            let $1 = data.data.$1;",
			"            this.$1 = JSON.parse(JSON.stringify($1));",
			"          });",
			"      } else {",
			"        this.$1 = JSON.parse(JSON.stringify(this.$1Prop));",
			"      }",
			"    },",
			"  },",
			"};",
			"</script>"
		],
		"description": "$2 = champ du formulaire, $3 = nom du COMPONENTS au pluriel, $4 = icon. Pour passer d'un champ à un autre n'oubliez pas de tabuler"
	},
	"Template composante SelectorLayout": {
		"scope":"vue",
		"prefix": "selector",
		"body": [
			"<template>",
			"  <div>",
			"    <SelectorLayout",
			"      ref=\"selector\"",
			"      v-model=\"item\"",
			"      @fetch=\"fetch\"",
			"      :prepend-icon=\"prependIcon\"",
			"      :label=\"label\"",
			"      :addAction=\"addAction\"",
			"    >",
			"      <template v-slot:selection=\"data\">",
			"        <${1:/capitalize}/}Object",
			"          :$1Prop=\"data.item\"",
			"          v-bind=\"data.attrs\"",
			"          :input-value=\"data.selected\"",
			"          @click=\"data.select\"",
			"          size=\"xs\"",
			"          action=\"none\"",
			"        />",
			"      </template>",
			"",
			"      <template v-slot:item=\"data\">",
			"        <${1:/capitalize}/}Object :$1Prop=\"data.item\" size=\"xs\" action=\"none\" />",
			"      </template>",
			"    </SelectorLayout>",
			"  </div>",
			"</template>",
			"",
			"<script>",
			"import { QUERY_$1s } from \"./graphql/queries\";",
			"import ${1:/capitalize}/}Object from \"./${1:/capitalize}/}Object.vue\";",
			"import SelectorLayout from \"@/components/COMPONENTS-skeleton/Layouts/SelectorLayout.vue\";",
			"",
			"export default {",
			"  name: \"${1:/capitalize}/}Selector\",",
			"",
			"  components: {",
			"    ${1:/capitalize}/}Object,",
			"    SelectorLayout,",
			"  },",
			"",
			"  data: () => ({",
			"    item: null,",
			"  }),",
			"",
			"  props: {",
			"    value: null,",
			"    errorMessage: { type: String },",
			"    label: { type: String, default: \"${1:/capitalize}/}s\" },",
			"    prependIcon: { type: String, default: '${2:exemple: mdi-material-design}' },",
			"    multiple: { type: Boolean, default: false },",
			"    addAction: { type: String, default: \"/${3: COMPONENTS }/$1s/add\" },",
			"  },",
			"",
			"  created() {",
			"    this.$root.$on(\"${3: COMPONENTS }--$1-create\", (item) => {",
			"      this.item = item;",
			"    });",
			"  },",
			"",
			"  methods: {",
			"    // Fetch les $1s en fonction du filtre",
			"    fetch() {",
			"      this.$refs.loading = true;",
			"      this.$$apollo",
			"        .query({",
			"          query: QUERY_$1s,",
			"          variables: {",
			"            pagination: this.$refs.selector.pagination,",
			"          },",
			"          fetchPolicy: \"no-cache\",",
			"        })",
			"        .then((__) => {",
			"          const data = __.data;",
			"          this.$refs.selector.items = data.$1s;",
			"          this.$refs.loading = false;",
			"        });",
			"    },",
			"  },",
			"",
			"  watch: {",
			"    value: function (val) {",
			"      this.item = val && val.id ? val.id : val;",
			"    },",
			"    item: function (val) {",
			"      if (val === null) {",
			"        this.$emit(\"input\", null);",
			"      } else {",
			"        this.$emit(\"input\", val);",
			"      }",
			"    },",
			"  },",
			"};",
			"</script>"
		],
		"description": "$2 = nom de l'icon, $3 = nom du COMPONENTS.  Pour passer d'un champ à un autre n'oubliez pas de tabuler"
	}
}